
<!--
  Small library of client-side reactive components

  https://nuejs.org/docs/nuejs/reactive-components.html
-->

<a @name="dialog-opener" class="dialog-opener" @click="open">
  <img loading="lazy" src="img/settings.svg" class="icon">
  <script>
    open() {
      const key = this.root.getAttribute('key')
      const dialog = window[key]
      if (dialog) dialog.showModal()
    }
  </script>
</a>

<dialog @name="theme-selector">
  <h2>Select theme</h2>

  <section class="theme-options">
    <label :for="el, i in themes" :style="background-color: #{el.color}" class="theme">
      <input name="theme" type="radio" :checked="i === checkedIndex" @change="change(el, $event, i)">
      <h4>{ el.name }</h4>
    </label>
  </section>

  <script>
    checkedIndex = 0
    change(el, e, i) {
      this.checkedIndex = i 
      document.body.className = el.class || el.name.toLowerCase()
      themes.close()
    }
  </script>

</dialog>

<!-- markdown loader (client-side) -->
<section @name="markdown-loader" class="markdown-body">
  <script>
    async connected() {
      try {
        const srcPath = this.root.getAttribute('path')
        if (!srcPath) return
        const res = await fetch(srcPath)
        const md = await res.text()
        this.root.innerHTML = this.mdToHtml(md)
      } catch (e) {
        this.root.innerHTML = '<p>Failed to load content.</p>'
      }
    }
    mdToHtml(md) {
      // very small markdown-to-html: headings, lists, links, paragraphs
      let html = md
        .replace(/^###\s+(.*)$/gm, '<h3>$1</h3>')
        .replace(/^##\s+(.*)$/gm, '<h2>$1</h2>')
        .replace(/^#\s+(.*)$/gm, '<h1>$1</h1>')
        .replace(/^-\s+(.*)$/gm, '<li>$1</li>')
        .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1<\/a>')
      // wrap list items
      html = html.replace(/(<li>[\s\S]*?<\/li>)(?!(.|\n)*<li>)/g, '<ul>$1</ul>')
      // horizontal rule
      html = html.replace(/^---$/gm, '<hr />')
      // paragraphs: blank-line separated
      html = html
        .split(/\n\n+/)
        .map(block => /<(h\d|ul|hr)/.test(block) ? block : `<p>${block}</p>`)
        .join('\n')
      return html
    }
  </script>
</section>